
*******************************
I AM SORRY BUT PLEASE READ THIS FIRST
*******************************

Before I answer this question, please let me talk about my confusion about these problems.
The 3 questions (1.1~1.3) seem to be ambiguous, and I do not know which one is correct.

Let me explain it.
For example, Question 1.1 is:

  Input: number arrays(0~9)
  find out the "Longest", "Sequential Increasing" array in the given input array.

  My confusion is that, does the question ask me to find a sub-array from the input array, 
or to find a "longest" and "sequential increasing" array out of the input arrays?

  Namely, is it like: (input: [5,1,2,3,5,7,7,8,5,7] => output: [1,2,3,5,7])
                or:   (input:  {[1,2,4], 
                                [2,3,6,3,4],
                                [1,1,1,4,5],
                                [9,3,1,2,3,4,5,6],
                                [2,3,4,6,8,9]}     
                      => output: 
                                [2,3,4,6,8,9]

  And in Question 1.3, although it explains the definition of "sequential same character",
it only asks me to find out the "longest" array (not even mentions the sequential same charater).

  Because both of these understanding seem acceptable, I just choose the first one.　
　If I misunderstood the questions, please forgive me.
　I think, in the recruitment examintaion, the concept and  programming logic are the most important.
My code is based on the first understanding, to find a subarray from the given array. And if there
are more than one longest subarrays with the same length, only the first one will be returned. 




********************
SOME DISCUSSION
********************

If question is to find a longest and (sequenctial increaing/equivalent/same character) SubArray of the input array,
the time complexity of each problem is O(n), (say the input has n elements). We can scan the array from start to end
and we can easily get the answer of each problem.
Because the three problems are quite similar, we can use some design patterns like "Stratedy Pattern" to make the code
more flexible, reuseable and elegent.



********************
EXCEPTIONS
********************
There could be some exceptions because I did not check the input.
Like in 1.3, if the user input some characters other than A-Z,a~z, the program will also run.








